Ext.data.JsonP.glu_test({"mixedInto":[],"tagname":"class","extends":null,"alternateClassNames":[],"inheritdoc":null,"parentMixins":[],"singleton":true,"statics":{"css_mixin":[],"cfg":[],"method":[],"property":[],"event":[],"css_var":[]},"requires":[],"mixins":[],"code_type":"nop","inheritable":false,"meta":{},"members":{"css_mixin":[],"cfg":[],"method":[{"tagname":"method","owner":"glu.test","meta":{},"name":"createBackend","id":"method-createBackend"},{"tagname":"method","owner":"glu.test","meta":{},"name":"createTable","id":"method-createTable"}],"event":[],"property":[],"css_var":[]},"private":null,"uses":[],"subclasses":[],"name":"glu.test","aliases":{},"superclasses":[],"component":false,"html_meta":{},"id":"class-glu.test","html":"<div><pre class=\"hierarchy\"><h4>Files</h4><div class='dependency'><a href='source/test_ajax.html#glu-test' target='_blank'>test_ajax.js</a></div><div class='dependency'><a href='source/test_data.html#glu-test' target='_blank'>test_data.js</a></div></pre><div class='doc-contents'><p>Provides simulation facilities for specification-based testing</p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-createBackend' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='glu.test'>glu.test</span><br/><a href='source/test_ajax.html#glu-test-method-createBackend' target='_blank' class='view-source'>view source</a></div><a href='#!/api/glu.test-method-createBackend' class='name expandable'>createBackend</a>( <span class='pre'>Object config, Object defaultRoot, Object fallbackToAjax, Object autoRespond, Object routes</span> ) : Object</div><div class='description'><div class='short'> ...</div><div class='long'>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>config</span> : Object<div class='sub-desc'><p>The backend configuration in the form:</p>\n</div></li><li><span class='pre'>defaultRoot</span> : Object<div class='sub-desc'><p>The root url to capture (that is, the root url of your JSON REST services). Often it is something like '/json'. Defaults to '/'</p>\n</div></li><li><span class='pre'>fallbackToAjax</span> : Object<div class='sub-desc'><p>When true, if an AJAX call is made to a route that is not captured by this back-end, go ahead and let it be handled normally by the AJAX library. When false, throw an exception.</p>\n</div></li><li><span class='pre'>autoRespond</span> : Object<div class='sub-desc'><p>Automatically fake the response (for \"live simulation\" mode with an actual user)</p>\n</div></li><li><span class='pre'>routes</span> : Object<div class='sub-desc'><p>The routes for capture</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>The route format is in the form</p>\n\n<pre><code>'routename' : {\n   url : 'foo/bar/:id',\n   handle : function(req) { return {echoId: req.params.id};}\n}\n</code></pre>\n\n<p>Example:</p>\n\n<pre><code> backend = glu.test.createBackend({\n     defaultRoot: '/json/',\n     fallbackToAjax: auto,\n     autoRespond: auto,\n     routes: {\n         'removeAssets': {\n             url: 'assets/action/remove',\n             handle: function(req) {\n                 return assets.remove(req.params.ids);\n             }\n         },\n         'requestVerification': {\n             url: 'assets/action/requestVerification',\n             handle: function(req) {\n                 return assets.update(req.params.ids, {status: 'verifying' });\n             }\n         },\n         'assetSave': {\n             url: 'assets/:id/action/save',\n             handle: function(req) {\n                 return assets.replace(req.params.id, req.jsonData);\n             }\n         },\n         'assets': {\n             url: 'assets',\n             handle: function(req) {\n                 return assets.list(req.params);\n             }\n         },\n         'asset': {\n             url: 'assets/:id',\n             handle: function(req) {\n                 return assets.get(req.params.id);\n             }\n         }\n     }\n });\n</code></pre>\n</div></li></ul></div></div></div><div id='method-createTable' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='glu.test'>glu.test</span><br/><a href='source/test_data.html#glu-test-method-createTable' target='_blank' class='view-source'>view source</a></div><a href='#!/api/glu.test-method-createTable' class='name expandable'>createTable</a>( <span class='pre'>Object fields, Object data</span> ) : <a href=\"#!/api/glu.test.MemoryTable\" rel=\"glu.test.MemoryTable\" class=\"docClass\">glu.test.MemoryTable</a></div><div class='description'><div class='short'>Creates a table given a fields definition and an array of initial data ...</div><div class='long'><p>Creates a table given a fields definition and an array of initial data</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>fields</span> : Object<div class='sub-desc'>\n</div></li><li><span class='pre'>data</span> : Object<div class='sub-desc'>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'><a href=\"#!/api/glu.test.MemoryTable\" rel=\"glu.test.MemoryTable\" class=\"docClass\">glu.test.MemoryTable</a></span><div class='sub-desc'>\n</div></li></ul></div></div></div></div></div></div></div>","files":[{"href":"test_ajax.html#glu-test","filename":"test_ajax.js"},{"href":"test_data.html#glu-test","filename":"test_data.js"}]});