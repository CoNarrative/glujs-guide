Ext.data.JsonP.glu_extjs_adapters_container({"mixedInto":[],"tagname":"class","extends":"glu.extjs.adapters.component","alternateClassNames":[],"inheritdoc":null,"parentMixins":[],"singleton":false,"statics":{"css_mixin":[],"cfg":[],"method":[],"property":[],"event":[],"css_var":[]},"requires":[],"mixins":[],"code_type":"nop","inheritable":false,"meta":{},"members":{"css_mixin":[],"cfg":[{"tagname":"cfg","owner":"glu.extjs.adapters.component","meta":{},"name":"cls","id":"cfg-cls"},{"tagname":"cfg","owner":"glu.extjs.adapters.component","meta":{},"name":"hidden","id":"cfg-hidden"},{"tagname":"cfg","owner":"glu.extjs.adapters.component","meta":{},"name":"itemCls","id":"cfg-itemCls"},{"tagname":"cfg","owner":"glu.extjs.adapters.container","meta":{},"name":"items","id":"cfg-items"}],"method":[],"event":[],"property":[],"css_var":[]},"uses":[],"subclasses":["glu.extjs.adapters.compositefield","glu.extjs.adapters.panel","glu.extjs.adapters.paging"],"name":"glu.extjs.adapters.container","aliases":{},"superclasses":["glu.extjs.adapters.component"],"component":false,"html_meta":{},"id":"class-glu.extjs.adapters.container","html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'><a href='#!/api/glu.extjs.adapters.component' rel='glu.extjs.adapters.component' class='docClass'>glu.extjs.adapters.component</a><div class='subclass '><strong>glu.extjs.adapters.container</strong></div></div><h4>Subclasses</h4><div class='dependency'><a href='#!/api/glu.extjs.adapters.compositefield' rel='glu.extjs.adapters.compositefield' class='docClass'>glu.extjs.adapters.compositefield</a></div><div class='dependency'><a href='#!/api/glu.extjs.adapters.paging' rel='glu.extjs.adapters.paging' class='docClass'>glu.extjs.adapters.paging</a></div><div class='dependency'><a href='#!/api/glu.extjs.adapters.panel' rel='glu.extjs.adapters.panel' class='docClass'>glu.extjs.adapters.panel</a></div><h4>Files</h4><div class='dependency'><a href='source/container.html#glu-extjs-adapters-container' target='_blank'>container.js</a></div></pre><div class='doc-contents'>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-cfg'>Config options</h3><div class='subsection'><div id='cfg-cls' class='member first-child inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/glu.extjs.adapters.component' rel='glu.extjs.adapters.component' class='defined-in docClass'>glu.extjs.adapters.component</a><br/><a href='source/component.html#glu-extjs-adapters-component-cfg-cls' target='_blank' class='view-source'>view source</a></div><a href='#!/api/glu.extjs.adapters.component-cfg-cls' class='name expandable'>cls</a><span> : String</span></div><div class='description'><div class='short'>one-way binding. ...</div><div class='long'><p><em>one-way binding.</em> Sets a convenience css class. Since the binding removes the old class before adding the new, this\nproperty is suitable for a variety of dynamic class effects, made easy by using text substitutions in the binding. For example:</p>\n\n<pre><code> cls : 'my-widget-status-@{status}'\n</code></pre>\n\n<p>will dynamically change the class by naming convention to match the current status.</p>\n</div></div></div><div id='cfg-hidden' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/glu.extjs.adapters.component' rel='glu.extjs.adapters.component' class='defined-in docClass'>glu.extjs.adapters.component</a><br/><a href='source/component.html#glu-extjs-adapters-component-cfg-hidden' target='_blank' class='view-source'>view source</a></div><a href='#!/api/glu.extjs.adapters.component-cfg-hidden' class='name expandable'>hidden</a><span> : String</span></div><div class='description'><div class='short'>one-way binding. ...</div><div class='long'><p><em>one-way binding.</em> Sets the visibility of the component.</p>\n\n<p><strong>Convention:</strong> @{<em>foo</em>IsHidden}</p>\n</div></div></div><div id='cfg-itemCls' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/glu.extjs.adapters.component' rel='glu.extjs.adapters.component' class='defined-in docClass'>glu.extjs.adapters.component</a><br/><a href='source/component.html#glu-extjs-adapters-component-cfg-itemCls' target='_blank' class='view-source'>view source</a></div><a href='#!/api/glu.extjs.adapters.component-cfg-itemCls' class='name expandable'>itemCls</a><span> : String</span></div><div class='description'><div class='short'>one-way binding. ...</div><div class='long'><p><em>one-way binding.</em> Sets a convenience item css class. Since the binding removes the old class before adding the new, this\nproperty is suitable for a variety of dynamic class effects, made easy by using text substitutions in the binding. For example:</p>\n\n<pre><code> itemCls : 'my-widget-status-@{status}'\n</code></pre>\n\n<p>will dynamically change the class by naming convention to match the current status.</p>\n</div></div></div><div id='cfg-items' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='glu.extjs.adapters.container'>glu.extjs.adapters.container</span><br/><a href='source/container.html#glu-extjs-adapters-container-cfg-items' target='_blank' class='view-source'>view source</a></div><a href='#!/api/glu.extjs.adapters.container-cfg-items' class='name expandable'>items</a><span> : Array/glu.List/glu.ActivatorList/Ext.data.Store</span></div><div class='description'><div class='short'>one-way binding. ...</div><div class='long'><p><em>one-way binding.</em>\nThis indicates that the items collection under this control is entirely bound and controlled by an array, List, or\nStore within the view model. The items can be Records, Models, or Viewmodels.\nAs items are removed or added, they will be rendered appropriately through a defined itemTemplate (for Models\nand Viewmodels when an itemTemplate is defined)\nor through a matching view (for Viewmodels).\nThe items will honor their parent default xtype unless overriden.</p>\n\n<p>Since there is a collapsed tool available to the panel, we will support two-way binding in the future.</p>\n\n<p><strong>Convention:</strong> @{<em>item</em>List}</p>\n</div></div></div></div></div></div></div>","files":[{"href":"container.html#glu-extjs-adapters-container","filename":"container.js"}]});