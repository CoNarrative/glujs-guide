Ext.data.JsonP.glu_extjs_adapters_autofield({"mixedInto":[],"tagname":"class","extends":null,"alternateClassNames":[],"inheritdoc":null,"parentMixins":[],"singleton":false,"statics":{"css_mixin":[],"cfg":[],"method":[],"property":[],"event":[],"css_var":[]},"requires":[],"mixins":[],"code_type":"nop","inheritable":false,"meta":{"author":["Mike Gai, Nick Tackes"]},"members":{"css_mixin":[],"cfg":[],"method":[],"event":[],"property":[],"css_var":[]},"uses":[],"subclasses":[],"name":"glu.extjs.adapters.autofield","aliases":{},"superclasses":[],"component":false,"html_meta":{"author":null},"id":"class-glu.extjs.adapters.autofield","html":"<div><pre class=\"hierarchy\"><h4>Files</h4><div class='dependency'><a href='source/autofield.html#glu-extjs-adapters-autofield' target='_blank'>autofield.js</a></div></pre><div class='doc-contents'><h2>Glu Virtual Component</h2>\n\n<p>This is not an actual component but a \"virtual component\". When you use the 'autofield' as an xtype, this adapter actually <em>transforms</em>\nthe existing configuration and assigns the xtype for you. It does this by looking up the given name on the data model\nto which the control is bound to determine its type, then generating a configuration that best matches.</p>\n\n<pre><code> glu.ns('sample.viewmodels').student = {\n     fields : [{\n         name : 'firstName'\n     },{\n         name : 'lastName'\n     },{\n         name : 'active',\n         type : 'boolean'\n     }]\n }\n glu.ns('sample.views').student = {\n     xtype : 'form',\n     defaultType : 'autofield',\n     items : [{\n         name : 'firstName'\n     },{\n         name : 'lastName'\n     },{\n         name : 'active'\n     }]\n }\n</code></pre>\n\n<p>The 'active' field will become a yes/no radio button. The point is that you are specifying just the bare minimum to logically order\nyour fields, while letting a common bit of code make the actual rendering decision. This pattern is be useful when\nyou want to strongly enforce your field / form patterns. Since glu also automatically converts any string in an items array into named configuration object</p>\n\n<pre><code> items: ['foo'] --&gt; items: [{name: 'foo'}]\n</code></pre>\n\n<p>the recommended form for defining the view is instead:</p>\n\n<pre><code>  glu.ns('sample.views').student = {\n     xtype : 'form',\n     defaultType : 'autofield',\n     items : ['firstName','lastName','active']\n }\n</code></pre>\n\n<p>Note that this straightforward transformation pattern is difficult with vanilla Ext JS as controls are statically typed\nand plugins are not invoked until after the (static) control constructor has been invoked.</p>\n\n<p>The autofield transformer is not (yet) meant to be a general-purpose transformer, but more of an example off of which\nyou can create your own transformers for your particular project. In the future we will be investigating making this\nmore configurable so that you can use it 'out of the box'.</p>\n</div><div class='members'></div></div>","files":[{"href":"autofield.html#glu-extjs-adapters-autofield","filename":"autofield.js"}]});